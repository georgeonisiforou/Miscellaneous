import ActionsModal from "@/components/ActionsModal";
import BorderRadiusBox from "@/components/BorderRadiusBox";
import Gauge from "@/components/Gauge";
import MultiStepForm from "@/components/MultiStepForm";
import Navbar from "@/components/Navbar";
import InfiniteSlider from "@/components/Slider";
import Waveform from "@/components/Waveform";
import Head from "next/head";
import Image from "next/image";
import { useEffect, useRef, useState } from "react";
import styled from "styled-components";
import { LiaHandPointerSolid } from "react-icons/lia";
import Tabs from "@/components/Tabs";
import Loader from "@/components/Loader";
import Pokemon from "@/components/Pokemon";
import PokemonWithReactQuery from "@/components/PokemonWithReactQuery";
import CopyBtn from "@/components/CopyBtn";
import CheckList from "@/components/CheckList";
import Divider from "@/components/Divider";

// const Trailer = styled.div`
//   height: 20px;
//   width: 20px;
//   border-radius: 50%;
//   background-color: white;
//   position: fixed;
//   left: ${({ mousepos }) => `${mousepos.x}px`};
//   top: ${({ mousepos }) => `${mousepos.y}px`};
//   z-index: 10000;
//   pointer-events: none;
//   opacity: ${({ interacting }) => (interacting ? 0.5 : 0)};
//   transition: all 500ms ease;
//   scale: ${({ interacting }) => (interacting ? 3 : 1)};
//   display: flex;
//   justify-content: center;
//   align-items: center;
// `;

const Container = styled.div`
  width: 100%;
  height: 100%;
  display: flex;
  flex-direction: column;
  padding: 1rem 2rem;

  @media (max-width: 768px) {
    padding: 0;
  }
`;

export default function Home() {
  // const mouseRef = useRef();
  // const [mousePos, setMousePos] = useState({ x: "", y: "" });
  // const [interacting, setInteracting] = useState(false);

  // useEffect(() => {
  //   window.onmousemove = (e) => {
  //     const x = e.clientX - mouseRef.current.offsetWidth / 2;
  //     const y = e.clientY - mouseRef.current.offsetHeight / 2;
  //     setMousePos({ x: x, y: y });

  //     const interactable = e.target.closest(".interactable");
  //     setInteracting(interactable !== null);
  //   };
  // }, []);

  return (
    <>
      <Head>
        <title>Miscellaneous</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Container>
        <CopyBtn />
        <Divider />
        <CheckList />
        <Divider />
        <Pokemon />
        <Divider />
        {/* <PokemonWithReactQuery /> */}
        <Loader />
        <Divider />
        {/* <Trailer ref={mouseRef} mousepos={mousePos} interacting={interacting}>
          {interacting && <LiaHandPointerSolid style={{ color: "black" }} />}
        </Trailer> */}
        <Waveform />
        <Divider />
        <InfiniteSlider />
        <Divider />
        <BorderRadiusBox />
        <Divider />
        <Gauge />
        <Divider />
        <MultiStepForm />
        <Divider />
        <ActionsModal />
        <Divider />
        <Tabs />
      </Container>
    </>
  );
}
